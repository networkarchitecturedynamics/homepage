}
if(any(duplicated(temp_tree)))
return(1)
}
temp_tree
nbranch
ntree
positive<-ntree[(ntree-nodes)<=0]
reserve<-ntree[which(ntree>nodes)]
negative<-reserve-nodes
ntree2<-unique(sort(c(positive,negative)))
n<-length(ntree2)
mat<-matrix(0,2^n,n)
for(i in 1:n)
mat[,i]<-rep(0:1,times=2^(i-1),each=2^(n-i))
colnames(mat)<-paste("",ntree2,sep="")
input<-mat
for(i in 1:nbranch){
temp<-outputTree(tree[i],input,nodes)
mat<-cbind(mat,temp)
names_pi<-unique(unlist(tree[[i]],recursive=TRUE))
names_pi<-paste0(names_pi,collapse = "&")
colnames(mat)[which(colnames(mat)=="temp")]<-names_pi
}
mat
output<-outputTree(tree,input,nodes)
mat<-cbind(mat,output=output)
id.truth<-mat[,"output"]==1
mat<-mat[id.truth,-ncol(mat),drop=FALSE]
mat<-mat[,-(1:n)]
mat
output
mat
Importances
PIs
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0.05)
target<-1
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=10,datalist,datasamples,parameters,0)
PIs
nnodes<-ncol(datalist[[1]])
nameOfpis<-sapply(PIs,function(x){paste0(sort(x),collapse = "&")},simplify="array")
count<-1
nameOfpis
cat("starting RFRE \n")
no_cores <- parallel::detectCores() - 1
cl <- parallel::makeCluster(no_cores)
clusterSetRNGStream(cl = cl, 0)
parallel::clusterExport(cl,ls(environment()),envir=environment())
forest<-parLapply(cl, 1:5,function(x){
tree<-ATEN::saalg2(datasamples,parameters[4],NULL,parameters[1],parameters[2],parameters[3],PIs,parameters[6])
return(tree)
})
parallel::stopCluster(cl)
rm(cl)
cat(count)
Importances<-calImportance(datasamples$outbag,datasamples$respoutbag,forest)
Importances
fores
forest
net1
orders<-order(Importances,decreasing = T)
Importances<-Importances[orders]
PIs<-unique(unlist(forest,recursive = F))
PIs<-PIs[orders]
orders
PIs
Importances<-Importances[Importances>0]
PIs<-PIs[1:length(Importances)]
PIs
Importances
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
net1
ngenes<-10
k<-5
set.seed(1)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
net1
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
library(BoolNet)
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
set.seed(0)
net1<-generateRandomNKNetwork(10, 5, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
net1
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
devtools::install_github("ningshi/ATEN")
library("BoolNet")
library("ATEN")
library("parallel")
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=10,datalist,datasamples,parameters,0)
rm(list=ls())
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=10,datalist,datasamples,parameters,0)
net1
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=10,datalist,datasamples,parameters,0)
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=10,datalist,datasamples,parameters,0)
PIs
net1
datalist[[2]]<-generateData(PIs,datalist)
datalist[[3]]<-matrix(datalist[[3]][,target])
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag)
datasamples$respoutbag<-matrix(datasamples$respoutbag)
findBF(10,PIs,target,parameters,datalist,datasamples,0)
net1
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=5,datalist,datasamples,parameters,0)
datalist[[2]]<-generateData(PIs,datalist)
datalist[[3]]<-matrix(datalist[[3]][,target])
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag)
datasamples$respoutbag<-matrix(datasamples$respoutbag)
findBF(5,PIs,target,parameters,datalist,datasamples,0)
PIs
net1
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=5,datalist,datasamples,parameters,0)
PIs
net1
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=10,datalist,datasamples,parameters,0)
PIs
datalist[[2]]<-generateData(PIs,datalist)
datalist[[3]]<-matrix(datalist[[3]][,target])
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag)
datasamples$respoutbag<-matrix(datasamples$respoutbag)
findBF(10,PIs,target,parameters,datalist,datasamples,0)
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=5,datalist,datasamples,parameters,0)
datalist[[2]]<-generateData(PIs,datalist)
datalist[[3]]<-matrix(datalist[[3]][,target])
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag)
datasamples$respoutbag<-matrix(datasamples$respoutbag)
findBF(10,PIs,target,parameters,datalist,datasamples,0)
PIs
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=10,datalist,datasamples,parameters,0)
datalist[[2]]<-generateData(PIs,datalist)
datalist[[3]]<-matrix(datalist[[3]][,target])
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag)
datasamples$respoutbag<-matrix(datasamples$respoutbag)
findBF(5,PIs,target,parameters,datalist,datasamples,0)
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=5,datalist,datasamples,parameters,0)
datalist[[2]]<-generateData(PIs,datalist)
datalist[[3]]<-matrix(datalist[[3]][,target])
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag)
datasamples$respoutbag<-matrix(datasamples$respoutbag)
findBF(10,PIs,target,parameters,datalist,datasamples,0)
net1
net1
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=5,datalist,datasamples,parameters,0)
PIs
net1
ngenes<-10
k<-5
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-1
datasamples<-bootstrap(datalist)
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=5,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=5,datalist,datasamples,parameters,0)
PIs
net1
library("BoolNet")
library("ATEN")
# ngenes is the number of nodes in a Boolean network
ngenes<-10
# k is the maximum number of genes
k<-5
#call generateRandomNKNetwork to generate a Boolean network, for more deatils about arguments, see BoolNet
set.seed(0)
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
net1
datalist<-buildTimeSeries(network=net1,numSeries=10,numPoints=10,noiseLevel=0)
target<-3
# Generate the bootstrap samples and oob samples according to the time-series data
datasamples<-bootstrap(datalist)
# respinbag and respoutbag save the expression values of the target node
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=2000,maxK=8,rate=0.2,nodes=ngenes)
library("parallel")
# B represents the how many trees would be generated
# pars is the argument for parallel computation
# the relevant datalist and datasamples are also required for network inference
# the last parameter 'seed' of PIs() is for helping reproduce the results, we set it as 0 here.
PIs<-findPIs(B=5,datalist,datasamples,parameters,0)
PIs
net1
datalist
rm(list=ls())
rm(list=ls())
rm(list=ls())
install.packages("blogdown")
blogdown::install_hugo(force = TRUE)
setwd("./Academic Kickstart/")
install.packages("blogdown")
blogdown::install_hugo(force = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(5)
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_list()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(BoolNet)
library(R.matlab)
dat<-readMat("./BN_30nodes/ABN_5noise.mat")[[1]]
dat<-list(t(dat[1:5,]),t(dat[6:10,]),t(dat[11:15,]),t(dat[16:20,]),t(dat[21:25,]),
t(dat[26:30,]),t(dat[31:35,]),t(dat[36:40,]),t(dat[41:45,]),t(dat[46:50,]),
t(dat[51:55,]),t(dat[56:60,]),t(dat[61:65,]),t(dat[66:70,]),t(dat[71:75,]),
t(dat[76:80,]),t(dat[81:85,]),t(dat[86:90,]),t(dat[91:95,]),t(dat[96:100,]))
#dat<-list(t(dat[1:50,]),t(dat[51:100,]))
#dat<-list(t(dat[1:20,]),t(dat[21:40,]),t(dat[41:60,]),t(dat[61:80,]),t(dat[81:100,]))
#dat<-list(t(dat[1:10,]),t(dat[11:20,]),t(dat[21:30,]),t(dat[31:40,]),t(dat[41:50,]),
#         t(dat[51:60,]),t(dat[61:70,]),t(dat[71:80,]),t(dat[81:90,]),t(dat[90:100,]))
rs<-reconstructNetwork(dat,method="bestfit",maxK=3,readableFunctions = T,returnPBN = F)
write.table("targets, factors",file = "bf.txt",quote = F,row.names = F,col.names = F,sep = "",append=T)
for(i in 1:nrow(dat[[1]])){
len<-length(rs$interactions[i][[1]])
if(len!=1){
#rs$interactions[i][[1]][2:length(rs$interactions[i][[1]])]<-NULL
bf<-print(rs$interactions[i][[1]][[sample(1:len,1)]]$expression)
}
else{
bf<-print(rs$interactions[i][[1]][[1]]$expression)
}
bf<-stringr::str_remove_all(bf," ")
gene<-paste0("Gene",i)
bf<-paste0(gene,", ",bf)
write.table(bf,file = "bf.txt",quote = F,row.names = F,col.names = F,sep = "",append=T)
}
rs<-loadNetwork("./bf.txt")
total<-0
att1 <- as.matrix(read_csv("./BN_30nodes/attr1.txt",col_names = FALSE))
dat2<-NULL
for(i in 1:length(att1)){
dat2<-rbind(dat2, as.integer(unlist(strsplit(att1[i],""))))
}
dat2<-t(dat2)
setwd("../dataset")
library(BoolNet)
library(R.matlab)
dat<-readMat("./BN_30nodes/ABN_5noise.mat")[[1]]
dat<-list(t(dat[1:5,]),t(dat[6:10,]),t(dat[11:15,]),t(dat[16:20,]),t(dat[21:25,]),
t(dat[26:30,]),t(dat[31:35,]),t(dat[36:40,]),t(dat[41:45,]),t(dat[46:50,]),
t(dat[51:55,]),t(dat[56:60,]),t(dat[61:65,]),t(dat[66:70,]),t(dat[71:75,]),
t(dat[76:80,]),t(dat[81:85,]),t(dat[86:90,]),t(dat[91:95,]),t(dat[96:100,]))
#dat<-list(t(dat[1:50,]),t(dat[51:100,]))
#dat<-list(t(dat[1:20,]),t(dat[21:40,]),t(dat[41:60,]),t(dat[61:80,]),t(dat[81:100,]))
#dat<-list(t(dat[1:10,]),t(dat[11:20,]),t(dat[21:30,]),t(dat[31:40,]),t(dat[41:50,]),
#         t(dat[51:60,]),t(dat[61:70,]),t(dat[71:80,]),t(dat[81:90,]),t(dat[90:100,]))
rs<-reconstructNetwork(dat,method="bestfit",maxK=3,readableFunctions = T,returnPBN = F)
write.table("targets, factors",file = "bf.txt",quote = F,row.names = F,col.names = F,sep = "",append=T)
for(i in 1:nrow(dat[[1]])){
len<-length(rs$interactions[i][[1]])
if(len!=1){
#rs$interactions[i][[1]][2:length(rs$interactions[i][[1]])]<-NULL
bf<-print(rs$interactions[i][[1]][[sample(1:len,1)]]$expression)
}
else{
bf<-print(rs$interactions[i][[1]][[1]]$expression)
}
bf<-stringr::str_remove_all(bf," ")
gene<-paste0("Gene",i)
bf<-paste0(gene,", ",bf)
write.table(bf,file = "bf.txt",quote = F,row.names = F,col.names = F,sep = "",append=T)
}
rs<-loadNetwork("./bf.txt")
total<-0
att1 <- as.matrix(read_csv("./BN_30nodes/attr1.txt",col_names = FALSE))
dat2<-NULL
for(i in 1:length(att1)){
dat2<-rbind(dat2, as.integer(unlist(strsplit(att1[i],""))))
}
dat2<-t(dat2)
setwd("./Data of BNs with Noise/")
library(BoolNet)
library(R.matlab)
dat<-readMat("./BN_30nodes/ABN_5noise.mat")[[1]]
dat<-list(t(dat[1:5,]),t(dat[6:10,]),t(dat[11:15,]),t(dat[16:20,]),t(dat[21:25,]),
t(dat[26:30,]),t(dat[31:35,]),t(dat[36:40,]),t(dat[41:45,]),t(dat[46:50,]),
t(dat[51:55,]),t(dat[56:60,]),t(dat[61:65,]),t(dat[66:70,]),t(dat[71:75,]),
t(dat[76:80,]),t(dat[81:85,]),t(dat[86:90,]),t(dat[91:95,]),t(dat[96:100,]))
#dat<-list(t(dat[1:50,]),t(dat[51:100,]))
#dat<-list(t(dat[1:20,]),t(dat[21:40,]),t(dat[41:60,]),t(dat[61:80,]),t(dat[81:100,]))
#dat<-list(t(dat[1:10,]),t(dat[11:20,]),t(dat[21:30,]),t(dat[31:40,]),t(dat[41:50,]),
#         t(dat[51:60,]),t(dat[61:70,]),t(dat[71:80,]),t(dat[81:90,]),t(dat[90:100,]))
rs<-reconstructNetwork(dat,method="bestfit",maxK=3,readableFunctions = T,returnPBN = F)
write.table("targets, factors",file = "bf.txt",quote = F,row.names = F,col.names = F,sep = "",append=T)
for(i in 1:nrow(dat[[1]])){
len<-length(rs$interactions[i][[1]])
if(len!=1){
#rs$interactions[i][[1]][2:length(rs$interactions[i][[1]])]<-NULL
bf<-print(rs$interactions[i][[1]][[sample(1:len,1)]]$expression)
}
else{
bf<-print(rs$interactions[i][[1]][[1]]$expression)
}
bf<-stringr::str_remove_all(bf," ")
gene<-paste0("Gene",i)
bf<-paste0(gene,", ",bf)
write.table(bf,file = "bf.txt",quote = F,row.names = F,col.names = F,sep = "",append=T)
}
rs<-loadNetwork("./bf.txt")
total<-0
att1 <- as.matrix(read_csv("./BN_30nodes/attr1.txt",col_names = FALSE))
dat2<-NULL
for(i in 1:length(att1)){
dat2<-rbind(dat2, as.integer(unlist(strsplit(att1[i],""))))
}
dat2<-t(dat2)
library(BoolNet)
library(R.matlab)
dat<-readMat("./BN_30nodes/ABN_5noise.mat")[[1]]
dat<-list(t(dat[1:5,]),t(dat[6:10,]),t(dat[11:15,]),t(dat[16:20,]),t(dat[21:25,]),
t(dat[26:30,]),t(dat[31:35,]),t(dat[36:40,]),t(dat[41:45,]),t(dat[46:50,]),
t(dat[51:55,]),t(dat[56:60,]),t(dat[61:65,]),t(dat[66:70,]),t(dat[71:75,]),
t(dat[76:80,]),t(dat[81:85,]),t(dat[86:90,]),t(dat[91:95,]),t(dat[96:100,]))
#dat<-list(t(dat[1:50,]),t(dat[51:100,]))
#dat<-list(t(dat[1:20,]),t(dat[21:40,]),t(dat[41:60,]),t(dat[61:80,]),t(dat[81:100,]))
#dat<-list(t(dat[1:10,]),t(dat[11:20,]),t(dat[21:30,]),t(dat[31:40,]),t(dat[41:50,]),
#         t(dat[51:60,]),t(dat[61:70,]),t(dat[71:80,]),t(dat[81:90,]),t(dat[90:100,]))
rs<-reconstructNetwork(dat,method="bestfit",maxK=3,readableFunctions = T,returnPBN = F)
write.table("targets, factors",file = "bf.txt",quote = F,row.names = F,col.names = F,sep = "",append=T)
for(i in 1:nrow(dat[[1]])){
len<-length(rs$interactions[i][[1]])
if(len!=1){
#rs$interactions[i][[1]][2:length(rs$interactions[i][[1]])]<-NULL
bf<-print(rs$interactions[i][[1]][[sample(1:len,1)]]$expression)
}
else{
bf<-print(rs$interactions[i][[1]][[1]]$expression)
}
bf<-stringr::str_remove_all(bf," ")
gene<-paste0("Gene",i)
bf<-paste0(gene,", ",bf)
write.table(bf,file = "bf.txt",quote = F,row.names = F,col.names = F,sep = "",append=T)
}
rs<-loadNetwork("./bf.txt")
total<-0
att1 <- as.matrix(read_csv("./BN_30nodes/attr1.txt",col_names = FALSE))
dat2<-NULL
for(i in 1:length(att1)){
dat2<-rbind(dat2, as.integer(unlist(strsplit(att1[i],""))))
}
dat2<-t(dat2)
rs
att1 <- as.matrix(read_csv("./BN_30nodes/attr1.txt",col_names = FALSE))
att1 <- as.matrix(read.csv("./BN_30nodes/attr1.txt",col_names = FALSE))
attr1 <- read.csv("C:/Users/Ning/Desktop/dataset/Data of BNs with Noise/BN_30nodes/attr1.txt", header=FALSE)
View(attr1)
dat2<-NULL
for(i in 1:length(att1)){
dat2<-rbind(dat2, as.integer(unlist(strsplit(att1[i],""))))
}
attr1
dat2<-NULL
for(i in 1:length(attr1)){
dat2<-rbind(dat2, as.integer(unlist(strsplit(att1[i],""))))
}
dat2<-NULL
for(i in 1:length(attr1)){
dat2<-rbind(dat2, as.integer(unlist(strsplit(attr1[i],""))))
}
blogdown:::serve_site()
